func Test{{Resource}}Controller_{{Name}}(t *testing.T) {
	db, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection: %s", err, mock)
	}
	defer db.Close()
	sqlxDB := sqlx.NewDb(db, "sqlmock")

	tests := []struct {
		name           string
		path           string
		wantStatusCode int
	}{
		{
			name:           "Test replacing with valid {{Resource}} as body",
			path:           "{{path}}",
			wantStatusCode: 200,
		},
		{
			name:           "Test replacing with empty request body",
			path:           "{{path}}",
			wantStatusCode: 400,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			log := zap.NewExample().Sugar()
			defer log.Sync()

			router := GetRouter(log, sqlxDB)

			w := httptest.NewRecorder()
			req, _ := http.NewRequest("PUT", tt.path, nil)
			router.ServeHTTP(w, req)

			assert.Equal(t, tt.wantStatusCode, w.Code)
		})
	}
}
